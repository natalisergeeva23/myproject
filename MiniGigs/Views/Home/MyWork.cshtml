@{
    Layout = null;
}


<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Поиск задач</title>
    <link rel="stylesheet" href="~/css/header_footer.css">
    <link rel="stylesheet" href="~/css/my_work_style.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

</head>


<body>
    <header class="container">
        <div class="row align-items-center">
            <div class="col">
                <div class="logo">
                    <h1>MINIGIGS</h1>
                </div>
            </div>
            <div class="col">
                <nav class="main-nav">
                    <ul>
                        <li><a asp-controller="Home" asp-action="TaskSearch">Поиск задач</a></li>
                        <li><a asp-controller="Home" asp-action="MyWork">Мои работы</a></li>
                        <li><a asp-controller="Home" asp-action="FinanceExecutor">Финансы</a></li>
                    </ul>
                </nav>
            </div>
            <div class="col">
                <div class="user-cabinet">
                    <a href="javascript:void(0);" class="user-cabinet-link">Личный кабинет</a>
                </div>
            </div>
            <div class="col">
                <div class="user-profile">
                    <img src="~/sourse/add_order_img/account_acons.png" alt="img_account_header">
                    <p id="username">Имя пользователя</p> <!-- Добавлен id для элемента -->
                </div>
            </div>
        </div>
    </header>


    <section class="section-my-work">
        <form id="form1" runat="server">
            <div class="container">
                <h1>Мои работы</h1>
                <div class="tabs">
                    <button class="tab" id="currentWorksTab">Актуальные</button>
                    <button class="tab" id="completedWorksTab">Завершённые</button>

                </div>

                <p class="note">На этой странице отображаются только завершенные и одобренные задачи.</p>
                <table>
                    <tr>
                        <th>Название</th>
                        <th>Статус</th>
                        <th>Оплата</th>
                        <th>Заказчик</th>
                    </tr>
                    <tr>
                      
                    </tr>
                </table>
                <button class="show-more-button">Показать ещё</button>
            </div>
        </form>
    </section>
    <!-- Модальное окно -->
    <div id="myModal" class="modal">
        <!-- Содержимое модального окна -->
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Подробности работы</h2>
            <p id="workDescription"></p>
            <p id="workLink"></p>
            <p id="workCost"></p>
            <p id="workCustomer"></p>
        </div>
    </div>

    <!-- Модальное окно для завершения работы -->
    <div id="finishWorkModal" class="modal">
        <!-- Содержимое модального окна -->
        <div class="modal-content">
            <span class="closeFinishWork">&times;</span>
            <h2>Завершение работы</h2>
            <p>Прикрепите фото и добавьте комментарий о выполненной работе.</p>
            <form id="finishWorkForm">
                <input type="file" id="workPhoto" name="workPhoto">
<textarea id="workComment" name="workComment" rows="4" placeholder="Ваш комментарий"></textarea>
                <button type="submit" class="submitFinishWork">Закончить</button>
            </form>
        </div>
    </div>


    <footer class="footer footer-index bg-purple text-white">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-md-4">
                    <div class="footer-index-container-logo">
                        <img src="~/sourse/index_img/logos.png" alt="Логотип сайта">
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="footer-links">
                        <a class="links-footer-index-text" asp-controller="Home" asp-action="AboutProjectExecutor">О проекте</a>
                        <a class="links-footer-index-text" asp-controller="Home" asp-action="SupportServiceExecuter">Служба поддержки</a>
                    </div>
                </div>
                <div class="col-md-4">
                    <p class="footer-index-text">© MINIGIGS 2024. Сайт может содержать материалы для лиц старше 18 лет</p>
                </div>
            </div>
        </div>
    </footer>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var linkToCabinet = document.querySelector('.user-cabinet-link');

            linkToCabinet.addEventListener('click', function (e) {
                e.preventDefault(); // Предотвращаем стандартный переход по ссылке
                var userRole = localStorage.getItem('userRole');

                if (userRole === '1') {
                    window.location.href = '/Home/CustomerOffice';
                } else if (userRole === '2') {
                    window.location.href = '/Home/ExecutorOffice';
                } else {
                    // Если роль не определена, можно перенаправить на страницу входа или показать сообщение
                    alert('Пожалуйста, выполните вход.');
                }
            });
        });
    </script>
        <script>
        document.addEventListener('DOMContentLoaded', function () {
            var currentWorksTab = document.getElementById("currentWorksTab");
            var completedWorksTab = document.getElementById("completedWorksTab");

            // Первоначальная загрузка актуальных задач
            fetchWorksByStatus("В процессе");

            currentWorksTab.addEventListener('click', function (e) {
                e.preventDefault(); // Добавьте эту строку
                fetchWorksByStatus("В процессе");
                updateActiveTab(currentWorksTab, completedWorksTab);
            });

            completedWorksTab.addEventListener('click', function (e) {
                e.preventDefault(); // И здесь добавьте эту строку
                fetchWorksByStatus("Завершено");
                updateActiveTab(completedWorksTab, currentWorksTab);
            });

            // Получение модального окна и элементов для его управления
            var modal = document.getElementById("myModal");
            var finishWorkModal = document.getElementById("finishWorkModal");
            var span = document.getElementsByClassName("close")[0];
            var spanFinishWork = document.getElementsByClassName("closeFinishWork")[0];

            // Закрытие модального окна с деталями работы
            span.onclick = function () {
                modal.style.display = "none";
            }

            // Закрытие модального окна для завершения работы
            spanFinishWork.onclick = function () {
                finishWorkModal.style.display = "none";
            }

            // Закрытие любого модального окна при клике за его пределами
            window.onclick = function (event) {
                if (event.target == modal) {
                    modal.style.display = "none";
                } else if (event.target == finishWorkModal) {
                    finishWorkModal.style.display = "none";
                }
            }
        });

        function fetchCompletedWorks() {
            var userId = localStorage.getItem('userId');
            fetch(`http://172.20.10.2:5089/api/MyWorks/ByUserId/${userId}`)
                .then(response => response.json())
                .then(works => {
                    const tableBody = document.querySelector('.container table tbody');
                    tableBody.innerHTML = ''; // Очистите текущее содержимое таблицы

                    works.forEach(work => {
                        if (work.nameWorkStatus === "Завершено") {
                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td>${work.order.title}</td>
                                <td>${work.nameWorkStatus}</td>
                                <td>${work.order.cost}</td>
                                <td>${work.order.user.email}</td>
                            `;

                            // Добавьте здесь любые дополнительные обработчики событий, если они нужны

                            tableBody.appendChild(row);
                        }
                    });
                })
                .catch(e => {
                    console.error('Error fetching completed works: ', e);
                });
        }
        function updateActiveTab(activeTab, inactiveTab) {
            activeTab.classList.add("active");
            inactiveTab.classList.remove("active");
        }

        function fetchWorksByStatus(status) {
            var userId = localStorage.getItem('userId');
            fetch(`http://172.20.10.2:5089/api/MyWorks/ByUserId/${userId}`)
                .then(response => response.json())
                .then(works => {
                    const tableBody = document.querySelector('.container table tbody');
                    tableBody.innerHTML = ''; // Очистить таблицу перед добавлением новых записей

                    works.forEach(work => {

                        // Создаем строку таблицы для каждой работы
                        const row = document.createElement('tr');

                        // Добавляем кнопку "Завершить работу" только для актуальных работ
                        let finishWorkButtonHTML = '';
                        if (status === "В процессе") {
                            finishWorkButtonHTML = `<button class="finishWorkButton" data-work-id="${work.idMyWork}" data-customer-id="${work.order.idUser}">Завершить работу</button>`;
                        }


                        if (work.nameWorkStatus === status) {
                            const row = document.createElement('tr');
                            row.innerHTML = `
                    <td class="workData">${work.order.title}</td>
                    <td class="workData">${work.nameWorkStatus}</td>
                    <td class="workData">${work.order.cost}</td>
                    <td class="workData">${work.order.user.email}</td>
                            <td>${finishWorkButtonHTML}</td>
                        `;

                            // Добавляем строку в таблицу
                            tableBody.appendChild(row);
                        }
                    }); const workDataCells = document.querySelectorAll('.workData');
                    workDataCells.forEach(cell => {
                        cell.addEventListener('click', function () {
                            // Находим соответствующую строку с данными заказа (родительскую строку)
                            const row = cell.closest('tr');
                            // Получаем ID работы из data-атрибута кнопки "Завершить работу"
                            const workId = row.querySelector('.finishWorkButton').dataset.workId;
                            // Находим соответствующую работу по ID
                            const work = works.find(work => work.idMyWork === parseInt(workId));
                            if (work) {
                                // Открываем модальное окно с подробностями работы
                                showWorkDetails(work);
                            } else {
                                console.error('Работа не найдена по указанному ID:', workId);
                            }
                        });
                    });

                    // Теперь, когда строки таблицы уже добавлены, добавим обработчик событий для кнопок "Завершить работу"
                    const finishWorkButtons = document.querySelectorAll('.finishWorkButton');
                    finishWorkButtons.forEach(button => {
                        button.addEventListener('click', function (event) {
                            event.preventDefault(); // Предотвращаем стандартное действие кнопки по умолчанию
                            event.stopPropagation(); // Остановка всплытия события, чтобы не вызывать закрытие модального окна
                            // Находим соответствующую работу по ID, который хранится в data-атрибуте кнопки
                            const workId = button.dataset.workId;
                            const work = works.find(work => work.idMyWork === parseInt(workId));
                            if (work) {
                                // Затем открываем модальное окно для завершения работы
                                console.log('Значение id_customer перед отображением модального окна:', work.id_customer);

                                showFinishWorkModal(work, work.id_customer, work.idMyWork);
                            } else {
                                console.error('Работа не найдена по указанному ID:', workId);
                            }
                        });
                    });



                })
                .catch(e => {
                    console.error('Error fetching works: ', e);
                });
        }

        function showWorkDetails(work) {
            // Заполняем модальное окно данными
            document.getElementById('workDescription').textContent = `Описание: ${work.taskDescription}`;
            document.getElementById('workLink').textContent = `Ссылка: ${work.link}`;
            document.getElementById('workCost').textContent = `Оплата: ${work.order.cost}`;
            document.getElementById('workCustomer').textContent = `Заказчик: ${work.order.user.email}`;

            // Отображаем модальное окно
            var modal = document.getElementById("myModal");
            modal.style.display = "block";
        }


        async function showFinishWorkModal(work, id_customer, idMyWork) {
            var userId = localStorage.getItem('userId');
            console.log('ID завершенной работы:', idMyWork);

            const progressCheckResponse = await fetch(`http://172.20.10.2:5089/api/ProgressUsers/ByUserId/${userId}`);
            if (!progressCheckResponse.ok) {
                throw new Error(`Ошибка при проверке прогресса пользователя: ${progressCheckResponse.statusText}`);
            }

            const progressData = {
                idUser: userId,
                value: 5 // Используем общую стоимость заказа в качестве значения прогресса
            };

            if (progressCheckResponse.status === 200) {
                // Проверяем, есть ли данные в ответе
                const progressCheckData = await progressCheckResponse.json();
                if (progressCheckData.length === 0) {
                    // Если данные отсутствуют, выполняем POST-запрос для создания новой записи
                    const progressCreateResponse = await fetch('http://172.20.10.2:5089/api/ProgressUsers', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(progressData)
                    });

                    if (!progressCreateResponse.ok) {
                        throw new Error(`Ошибка при создании прогресса пользователя: ${progressCreateResponse.statusText}`);
                    }
                } else {
                    // Если данные существуют, получаем текущее значение и прибавляем новое значение
                    const existingProgressValue = progressCheckData[0].value;
                    progressData.value += existingProgressValue;

                    // Выполняем PUT-запрос для обновления
                    const progressUpdateResponse = await fetch(`http://172.20.10.2:5089/api/ProgressUsers/ByUserIdPut/${userId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(progressData)
                    });

                    if (!progressUpdateResponse.ok) {
                        throw new Error(`Ошибка при обновлении прогресса пользователя: ${progressUpdateResponse.statusText}`);
                    }
                }
            }

            // Отображаем модальное окно для завершения работы
            var finishWorkModal = document.getElementById("finishWorkModal");
            finishWorkModal.style.display = "block";
            var finishWorkForm = document.getElementById('finishWorkForm');

            finishWorkForm.onsubmit = function (e) {
                e.preventDefault();

                var formData = new FormData();
                var fileInput = document.getElementById('workPhoto');
                var commentInput = document.getElementById('workComment');
                var photoFile = fileInput.files[0];
                var comment = commentInput.value;
                var orderId = work.idOrder;
                var idUser = localStorage.getItem('userId');

                formData.append('workPhoto', photoFile);

                // URL с параметрами запроса
                var url = new URL('http://172.20.10.2:5089/api/WorkCompletions');
                var params = { comment: comment, 
                    orderId: orderId, 
                    userId: idUser, 
                    iDcustomer: id_customer,
                    id_my_works: idMyWork,
                    status: false };
                url.search = new URLSearchParams(params).toString();

                fetch(url, {
                    method: 'POST',
                    body: formData
                })
                    .then(response => {
                        // Check if the response has content
                        if (response.status === 200) { // No content
                            return null;
                        } else if (!response.ok) {
                            throw new Error('Network response was not ok: ' + response.statusText);
                        } else {
                            // Assume the response is JSON if not 204
                            return response.json();
                        }
                    })
                    .then(data => {
                        if (data) {
                            console.log(data);
                        }
                        // Предполагаем, что у вас есть доступ к ID работы и новому статусу
                        var workId = work.idMyWork; // Идентификатор работы, который нужно обновить
                        var newStatus = "Завершено"; // Новый статус для обновления


                        // Формирование URL для API запроса
                        var updateUrl = `http://172.20.10.2:5089/api/MyWorks/${workId}/updatestatus`;

                        // Выполнение PUT запроса для обновления статуса
                        fetch(updateUrl, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json',
                                'accept': '*/*'
                            },
                            body: JSON.stringify(newStatus) // Тело запроса с новым статусом
                        })
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Network response was not ok');
                                }
                                return response.text(); // Или response.json(), если сервер возвращает JSON
                            })
                            .then(updateResponse => {
                                console.log("Статус работы успешно обновлен:", updateResponse);
                                // Обновление UI после успешного обновления статуса работы
                                // Например, обновление списка работ или отображение уведомления пользователю
                            })
                            .catch(error => {
                                console.error('Ошибка при обновлении статуса работы:', error);
                            });

                        finishWorkModal.style.display = "none";
                        alert('Работа успешно завершена!');
                    })

                    .catch(error => {
                        console.error('Ошибка при отправке данных:', error);
                        alert('Произошла ошибка при отправке данных. Попробуйте снова.');
                    });

            };
        }
    


    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Получаем сохраненный ID пользователя
            var userId = localStorage.getItem('userId');

            fetch(`http://172.20.10.2:5089/api/Users/${userId}`, {
                method: 'GET',
                headers: {
                    'Accept': 'text/plain',
                    // Возможно, потребуется добавить токен авторизации в заголовки запроса
                    'Authorization': 'Bearer ' + localStorage.getItem('userToken')
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(userData => {
                    console.log(userData);
                    // Обновляем информацию на странице
                    document.getElementById('username').textContent = userData.name;
                    document.getElementById('usernames').textContent = userData.name;
                    // Если есть другие элементы для обновления, добавьте их здесь
                })
                .catch(error => console.error('Failed to fetch user data:', error));
        });

    </script>

<script src="~/js/userProfile.js"></script></body>