@{
    Layout = null;
}


<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Добавить заказ</title>
    <link rel="stylesheet" href="~/css/header_footer.css">
    <link rel="stylesheet" href="~/css/settings_style.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
</head>

<body>
    <header class="container">
        <div class="row align-items-center">
            <div class="col">
                <div class="logo">
                    <h1>MINIGIGS</h1>
                </div>
            </div>
            <div class="col">
                <nav class="main-nav">
                    <ul class="list-unstyled d-flex justify-content-center mb-0">
                        <li class="mr-3"><a asp-controller="Home" asp-action="AddCustom">Добавить заказ</a></li>
                        <li class="mr-3"><a asp-controller="Home" asp-action="MyOrders">Мои заказы</a></li>
                        <li><a asp-controller="Home" asp-action="FinanceCustomer">Финансы</a></li>
                    </ul>
                </nav>
            </div>
            <div class="col">
                <div class="user-cabinet">

                    <a href="javascript:void(0);" class="user-cabinet-link">Личный кабинет</a>
                </div>
            </div>
            <div class="col">
                <div class="user-profile">
                    <img src="~/sourse/add_order_img/account_acons.png" alt="img_account_header">
                    <p id="username">Имя пользователя</p>
                </div>
            </div>
        </div>
    </header>

    <section>
        <div class="container mt-5">
            <h2>Форма создания задачи</h2>
            <div class="tabs">
                <button class="tab" onclick="openTab(event, 'main')">Основное</button>
                @*                 <button class="tab" onclick="openTab(event, 'additional')">Дополнительно</button>
                *@
            </div>

            <!-- Секция для вкладки "Основное" -->
            <div id="main" class="tabcontent mt-5">
                <div class="profile-section">
                    <h2>Основное</h2>
                    <form>
                        <div class="form-group">
                            <label for="taskName">Название задачи:</label><br>
                            <input type="text" id="taskName" name="taskName" required><br>
                        </div>

                        <div class="form-group">
                            <label for="link">Ссылка:</label><br>
                            <input type="text" id="link" name="link" placeholder="https://" pattern="https?://.+" required><br>
                        </div>

                        <div class="form-group">
                            <label for="taskDescription">Задание:</label><br>
                            <input type="text" id="taskDescription" name="taskDescription" required><br>
                        </div>

                        <div class="form-group">
                            <label for="responseNeeded">Что нужно для ответа:</label><br>
                            <input type="text" id="responseNeeded" name="responseNeeded" required><br>
                        </div>

                        <div class="form-group">
                            <label for="datetask">Дата:</label><br>
                            <input type="date" id="datetask" name="datetask" required><br>
                        </div>

                        <div class="form-group">
                            <label for="tariff">Тариф:</label><br>
                            <select id="tariff" name="tariff" required>
                                <!-- Динамически заполненные опции будут здесь -->
                            </select><br>
                        </div>

                        <div class="form-group">
                            <label for="responseNeeded">Количество:</label><br>
                            <input type="number" id="counttask" name="counttask" required><br>
                        </div>

                        <div class="form-group">
                            <label for="responseNeeded">Стоимость за 1:</label><br>
                            <input type="number" id="costtask" name="costtask" required><br>
                        </div>

                        <div class="form-group">
                            <label>Общая стоимость:</label>
                            <span id="totalCost">0</span><br>
                        </div>

                        <button class="save-button">Создать</button>

                    </form>

                </div>
            </div>

            <!-- Секция для вкладки "Дополнительно" -->
            <div id="additional" class="tabcontent" style="display: none;">
                <div class="profile-section">
                    <h2>Дополнительно</h2>

                    <div class="form-group">
                        <label for="additionalList">Список страницы/других данных:</label>
                        <input type="text" id="additionalList" name="additionalList"><br>
                    </div>

                    <div class="form-group">
                        <label for="executionTime">Время выполнения:</label>
                        <input type="text" id="executionTime" name="executionTime"><br>
                    </div>

                    <button class="save-button">Добавить</button>
                </div>

            </div>

        </div>

        <script>
            function openTab(evt, tabName) {
                var i, tabcontent, tablinks;
                tabcontent = document.getElementsByClassName("tabcontent");
                for (i = 0; i < tabcontent.length; i++) {
                    tabcontent[i].style.display = "none";
                }
                tablinks = document.getElementsByClassName("tablinks");
                for (i = 0; i < tablinks.length; i++) {
                    tablinks[i].className = tablinks[i].className.replace(" active", "");
                }
                document.getElementById(tabName).style.display = "block";
                evt.currentTarget.className += " active";
            }
        </script>

    </section>

    <footer class="footer footer-index bg-purple text-white">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-md-4">
                    <div class="footer-index-container-logo">
                        <img src="~/sourse/index_img/logos.png" alt="Логотип сайта">
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="footer-links">
                        <a class="links-footer-index-text" asp-controller="Home" asp-action="AboutProjectCustomer">О проекте</a>
                        <a class="links-footer-index-text" asp-controller="Home" asp-action="SupportServiceCustomer">Служба поддержки</a>
                    </div>
                </div>
                <div class="col-md-4">
                    <p class="footer-index-text">© MINIGIGS 2024. Сайт может содержать материалы для лиц старше 18 лет</p>
                </div>
            </div>
        </div>
    </footer>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var linkToCabinet = document.querySelector('.user-cabinet-link');

            linkToCabinet.addEventListener('click', function (e) {
                e.preventDefault(); // Предотвращаем стандартный переход по ссылке
                var userRole = localStorage.getItem('userRole');

                if (userRole === '1') {
                    window.location.href = '/Home/CustomerOffice';
                } else if (userRole === '2') {
                    window.location.href = '/Home/ExecutorOffice';
                } else {
                    // Если роль не определена, можно перенаправить на страницу входа или показать сообщение
                    alert('Пожалуйста, выполните вход.');
                }
            });
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            fetch('http://172.20.10.2:5089/api/Tariffs')
                .then(response => response.json())
                .then(data => {
                    const selectElement = document.getElementById('tariff');
                    data.forEach(tariff => {
                        const option = document.createElement('option');
                        option.value = tariff.idTariff;
                        option.text = `${tariff.nameTariff}`;
                        selectElement.appendChild(option);
                    });
                })
                .catch(error => console.error('Ошибка при загрузке тарифов:', error));
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const countInput = document.getElementById('counttask');
            const costInput = document.getElementById('costtask'); // Исправлено с costPerOne на costtask
            const totalCostSpan = document.getElementById('totalCost');

            // Функция для вычисления общей стоимости
            function calculateTotalCost() {
                const count = parseInt(countInput.value) || 0;
                const costPerOne = parseFloat(costInput.value) || 0;
                const totalCost = count * costPerOne;
                totalCostSpan.textContent = totalCost.toFixed(2); // Округление до 2 десятичных знаков
            }

            // Добавляем обработчики событий на изменение значений в полях
            countInput.addEventListener('input', calculateTotalCost);
            costInput.addEventListener('input', calculateTotalCost);
        });

    </script>
    <script type="text/javascript">
        const today = new Date().toISOString().split('T')[0];
        document.getElementById('datetask').min = today;
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Получаем сохраненный ID пользователя
            var userId = localStorage.getItem('userId');

            fetch(`http://172.20.10.2:5089/api/Users/${userId}`, {
                method: 'GET',
                headers: {
                    'Accept': 'text/plain',
                    // Возможно, потребуется добавить токен авторизации в заголовки запроса
                    'Authorization': 'Bearer ' + localStorage.getItem('userToken')
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(userData => {
                    console.log(userData);
                    // Обновляем информацию на странице
                    document.getElementById('username').textContent = userData.name;
                    document.getElementById('usernames').textContent = userData.name;
                    // Если есть другие элементы для обновления, добавьте их здесь
                })
                .catch(error => console.error('Failed to fetch user data:', error));
        });

    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.querySelector('form');
            const userId = localStorage.getItem('userId'); // Получаем ID пользователя из локального хранилища

            form.addEventListener('submit', async function (e) {
                e.preventDefault(); // Предотвращаем стандартное поведение формы

                // Собираем данные из формы
                const formData = {
                    title: document.getElementById('taskName').value,
                    taskDescription: document.getElementById('taskDescription').value,
                    link: document.getElementById('link').value,
                    reportComment: document.getElementById('responseNeeded').value,
                    cost: parseFloat(document.getElementById('costtask').value),
                    counts: parseInt(document.getElementById('counttask').value),
                    taskAddition: '',
                    idOrderStatus: 1,
                    completionTime: document.getElementById('datetask').value,
                    idTariff: parseInt(document.getElementById('tariff').value),
                    idUser: userId
                };

                try {
                    // Получаем текущий баланс пользователя
                    let response = await fetch(`http://172.20.10.2:5089/api/Users/${userId}`);
                    if (!response.ok) {
                        throw new Error(`Ошибка при получении данных пользователя: ${response.statusText}`);
                    }
                    const userData = await response.json();

                    // Проверяем достаточность средств на балансе
                    const totalCost = formData.cost * formData.counts;
                    if (userData.amount < totalCost) {
                        alert("Недостаточно средств на балансе для создания заказа.");
                        return;
                    }

                    // Вычитаем сумму заказа из текущего баланса
                    const updatedAmount = userData.amount - totalCost;

                    // Отправляем обновленный баланс на сервер
                    response = await fetch(`http://172.20.10.2:5089/api/Users/${userId}/UpdateAmount?newAmount=${updatedAmount}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    });

                    if (!response.ok) {
                        throw new Error(`Ошибка при обновлении баланса: ${response.statusText}`);
                    }

                    // Отправляем данные заказа на сервер
                    response = await fetch('http://172.20.10.2:5089/api/Orders', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(formData)
                    });

                    if (!response.ok) {
                        throw new Error(`Ошибка при создании заказа: ${response.statusText}`);
                    }

                    // Получаем текущую дату и время
                    const currentDateTime = new Date().toISOString();

                    // Отправляем данные в таблицу HistoryPayments
                    const historyData = {
                        dateTime: currentDateTime,
                        task: formData.title,
                        idUser: userId,
                        totalCost: totalCost
                    };

                    response = await fetch('http://172.20.10.2:5089/api/HistoryPayments', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'accept': 'text/plain'
                        },
                        body: JSON.stringify(historyData)
                    });

                    if (!response.ok) {
                        throw new Error(`Ошибка при добавлении данных в HistoryPayments: ${response.statusText}`);
                    }

                    // Проверяем наличие записи о прогрессе пользователя
                    const progressCheckResponse = await fetch(`http://172.20.10.2:5089/api/ProgressUsers/ByUserId/${userId}`);
                    if (!progressCheckResponse.ok) {
                        throw new Error(`Ошибка при проверке прогресса пользователя: ${progressCheckResponse.statusText}`);
                    }

                    const progressData = {
                        idUser: userId,
                        value: totalCost // Используем общую стоимость заказа в качестве значения прогресса
                    };

                    if (progressCheckResponse.status === 200) {
                        // Проверяем, есть ли данные в ответе
                        const progressCheckData = await progressCheckResponse.json();
                        if (progressCheckData.length === 0) {
                            // Если данные отсутствуют, выполняем POST-запрос для создания новой записи
                            const progressCreateResponse = await fetch('http://172.20.10.2:5089/api/ProgressUsers', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(progressData)
                            });

                            if (!progressCreateResponse.ok) {
                                throw new Error(`Ошибка при создании прогресса пользователя: ${progressCreateResponse.statusText}`);
                            }
                        } else {
                            // Если данные существуют, получаем текущее значение и прибавляем новое значение
                            const existingProgressValue = progressCheckData[0].value;
                            progressData.value += existingProgressValue;

                            // Выполняем PUT-запрос для обновления
                            const progressUpdateResponse = await fetch(`http://172.20.10.2:5089/api/ProgressUsers/ByUserIdPut/${userId}`, {
                                method: 'PUT',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(progressData)
                            });

                            if (!progressUpdateResponse.ok) {
                                throw new Error(`Ошибка при обновлении прогресса пользователя: ${progressUpdateResponse.statusText}`);
                            }
                        }
                    }

                    alert("Заказ успешно создан!");
                    // Опционально можно добавить дополнительные действия после успешного создания заказа, например, перенаправление на страницу моих заказов
                } catch (error) {
                    console.error('Ошибка:', error);
                    alert("Произошла ошибка при создании заказа.");
                }
            });
        });
    </script>



    <script src="~/js/userProfile.js"></script>
</body>